summary(model_mixed_lme)
# Suppose we are interested in day 10
day <- 16
# Suppose we are interested in day 10
day_of_interest<- 16
# Create a dataset with the two temperatures of interest (15 and 30 degrees) and the day of interest
data_lme <- expand.grid(Temperature = c(15, 30), Day = day_of_interest)
# Predict intensity for the combinations of temperature and day of interest
prediction_lme <- predict(model_mixed_lme, newdata = data_lme)
# Verifica y alinea los niveles de Mass entre el conjunto de datos original y newdata
levels(LargeData$Mass) == levels(day_of_interest$Mass)
# Supongamos que estamos interesados en el día 10
dia_interes <- 16
# Crear un conjunto de datos con las dos temperaturas de interés (15 y 30 grados) y el día de interés
datos_interes_lme <- expand.grid(Temp = c(15, 30), Day = dia_interes)
# Convertir datos_interes_lme a un marco de datos si es un vector
if (is.vector(datos_interes_lme)) {
datos_interes_lme <- as.data.frame(datos_interes_lme)
}
# Asegurar que Mass es parte de los datos_interes_lme
datos_interes_lme$Mass <- factor(rep("some_mass", nrow(datos_interes_lme)))
# Predecir la intensidad para las combinaciones de temperatura y día de interés
predicciones_lme <- predict(model_mixed_lme, newdata = datos_interes_lme)
# Mostrar las predicciones
print(predicciones_lme)
LargeData <- X %>%
pivot_longer(cols = -c(Name, Date, Day, Temp), names_to = "Mass", values_to = "Intensity")
# Ajusta un modelo lineal mixto
model_mix_nlme <- lme(Intensity ~ Temp * Day, random = ~1 | Mass, data = LargeData)
# Muestra un resumen del modelo
summary(model_mix_nlme)
ggplot(LargeData, aes(x = Day, y = Intensity, color = as.factor(Temp))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Intensity changes with Time",
x = "Day",
y = "Intensity",
color = "Temp")+
theme(
text = element_text(size = 12),
title = element_text(size = 16),
axis.title = element_text(size = 20),
legend.text = element_text(size = 20)  )
ggplot(LargeData, aes(x = factor(Day), y = Intensity, fill = as.factor(Temp))) +
geom_boxplot(outlier.shape = NA, fill = c("blue", "red", "green")) +  # Relleno de los boxplots
geom_jitter(position = position_jitter(width = 0.3, height = 0), size = 3, alpha = 0.7, color = "black") +  # Puntos agrandados
labs(title = "Intensity variation per day",
x = "Day",
y = "Intensity",
fill = "Temp") +
theme(
text = element_text(size = 24),  # Tamaño del texto general
title = element_text(size = 18),  # Tamaño del título
axis.title = element_text(size = 16),  # Tamaño de las etiquetas de ejes
legend.text = element_text(size = 12)  # Tamaño del texto de la leyenda
)
ggplot(LargeData, aes(x = Day, y = Intensity, color = as.factor(Temp))) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Intensity changes with Time",
x = "Day",
y = "Intensity",
color = "Temp")+
theme(
text = element_text(size = 22),
title = element_text(size = 16),
axis.title = element_text(size = 20),
legend.text = element_text(size = 20)  )
# Boxplot por Día
ggplot(LargeData, aes(x = factor(Day), y = Intensity, fill = as.factor(Temp))) +
geom_boxplot() +
labs(title = "Intensity variation per day",
x = "Day",
y = "Intensity",
fill = "Tempe")
# Boxplot por Día
ggplot(LargeData, aes(x = factor(Day), y = Intensity, fill = as.factor(Temp))) +
geom_boxplot() +
labs(title = "Intensity variation per day",
x = "Day",
y = "Intensity",
fill = "Temp")
# Asegurarse de que Day sea un factor y está ordenado
LargeData$Day <- factor(LargeData$Day, levels = unique(LargeData$Day))
# Asegurarse de que Temp sea un factor y está ordenado
LargeData$Temp <- factor(LargeData$Temp, levels = unique(LargeData$Temp))
ggplot(LargeData, aes(x = factor(Day), y = Intensity, fill = as.factor(Temp))) +
geom_boxplot() +
labs(title = "Intensity variation per day",
x = "Day",
y = "Intensity",
fill = "Temp")
# Ajusta un modelo lineal mixto
model_mix_nlme <- lme(Intensity ~ Temp * Day, random = ~1 | Mass, data = LargeData)
# Fit a mixed-effects model with fixed effects for Temperature and Day, and a random effect for Mass
model_mixed_lme <- lme(Intensity ~ Temp * Day, random = ~1 | Mass, data = LargeData)
library(Matrix)
library(lme4)
library(tidyverse)
file="DataBrines.csv"
X=read.csv(file, row.names=1, check.names = FALSE, sep=";")
row_names_df_to_remove<-c("2023-12-19_30C (3)", "2023-12-19_15C (1)", "11-12-2023_15C (4)", "11-12-2023_15C (3)", "20-22-2023_15C (3)")
X=(X[!(row.names(X) %in% row_names_df_to_remove),])
LargeData <- X %>%
pivot_longer(cols = -c(Name, Date, Day, Temp), names_to = "Mass", values_to = "Intensity")
# Ajusta un modelo lineal mixto
model_mix_nlme <- lme(Intensity ~ Temp * Day, random = ~1 | Mass, data = LargeData)
# Muestra un resumen del modelo
summary(model_mix_nlme)
# Crear un gráfico de líneas para las curvas de intensidad
ggplot(LargeData, aes(x = Day, y = Intensity, color = as.factor(Temp))) +
geom_line() +
# Agregar puntos para resaltar la diferencia
geom_point(data = datos[datos$Temperature == 30, ], aes(x = Day, y = Intensity), color = "red", size = 2) +
# Etiquetas y título
labs(title = "Diferencia de Intensidades entre 15 y 30 Grados",
x = "Day",
y = "Intensity",
color = "Temperatura") +
# Agregar leyenda
scale_color_manual(values = c("blue", "red"), labels = c("15 grados", "30 grados")) +
# Personalización opcional: tema y estilo
theme_minimal()
# Crear un gráfico de líneas para las curvas de intensidad
ggplot(LargeData, aes(x = Day, y = Intensity, color = as.factor(Temp))) +
geom_line() +
# Agregar puntos para resaltar la diferencia
geom_point(LargeData = LargeData[LargeData$Temperature == 30, ], aes(x = Day, y = Intensity), color = "red", size = 2) +
# Etiquetas y título
labs(title = "Diferencia de Intensidades entre 15 y 30 Grados",
x = "Day",
y = "Intensity",
color = "Temperatura") +
# Agregar leyenda
scale_color_manual(values = c("blue", "red"), labels = c("15 grados", "30 grados")) +
# Personalización opcional: tema y estilo
theme_minimal()
# Crear un gráfico de líneas para las curvas de intensidad
ggplot(LargeData, aes(x = Day, y = Intensity, color = as.factor(Temp))) +
geom_line() +
# Agregar puntos para resaltar la diferencia
geom_point(LargeData = LargeData[LargeData$Temp == 30, ], aes(x = Day, y = Intensity), color = "red", size = 2) +
# Etiquetas y título
labs(title = "Diferencia de Intensidades entre 15 y 30 Grados",
x = "Day",
y = "Intensity",
color = "Temp") +
# Agregar leyenda
scale_color_manual(values = c("blue", "red"), labels = c("15 grados", "30 grados")) +
# Personalización opcional: tema y estilo
theme_minimal()
View(LargeData)
# Crear un gráfico de líneas para las curvas de intensidad
ggplot(LargeData, aes(x = Day, y = Intensity, color = as.factor(Temp))) +
geom_line() +
# Agregar puntos para resaltar la diferencia
geom_point(data = subset(LargeData, Temp == 30), aes(x = Day, y = Intensity), color = "red", size = 2) +
# Etiquetas y título
labs(title = "Diferencia de Intensidades entre 15 y 30 Grados",
x = "Día",
y = "Intensidad",
color = "Temperatura") +
# Personalización opcional: tema y estilo
theme_minimal()
# Crear un gráfico de líneas para las curvas de intensidad
ggplot(LargeData, aes(x = Day, y = Intensity, color = as.factor(Temp))) +
geom_line() +
# Agregar puntos para resaltar la diferencia
geom_point(data = subset(LargeData, Temp == 30), aes(x = Day, y = Intensity), color = "pink", size = 2) +
# Etiquetas y título
labs(title = "Diferencia de Intensidades entre 15 y 30 Grados",
x = "Day",
y = "Intensity",
color = "Temperature") +
# Personalización opcional: tema y estilo
theme_minimal()+
theme(
text = element_text(size = 22),
axis.text = element_text(size = 20),
axis.title = element_text(size = 24, face = "bold")
)
# Crear un gráfico de líneas para las curvas de intensidad
ggplot(LargeData, aes(x = Day, y = Intensity, color = as.factor(Temp))) +
geom_line() +
# Agregar puntos para resaltar la diferencia
geom_point(data = subset(LargeData, Temp == 30), aes(x = Day, y = Intensity), color = "red", size = 2) +
# Etiquetas y título
labs(title = "Difference in intensities between 15 and 30 degrees Celcius",
x = "Day",
y = "Intensity",
color = "Temperature") +
# Personalización opcional: tema y estilo
theme_minimal()+
theme(
text = element_text(size = 22),
axis.text = element_text(size = 20),
axis.title = element_text(size = 24, face = "bold")
)
# Crear un gráfico de líneas para las curvas de intensidad
ggplot(LargeData, aes(x = Day, y = Intensity, color = as.factor(Temp))) +
geom_line() +
# Agregar puntos para resaltar la diferencia
geom_point(data = subset(LargeData, Temp == 30), aes(x = Day, y = Intensity), color = "red", size = 2) +
# Etiquetas y título
labs(title = "Difference in intensities between 15 and 30 degrees Celcius",
x = "Day",
y = "Intensity",
color = "Temperature") +
# Personalización opcional: tema y estilo
theme_minimal()+
theme(
text = element_text(size = 22),
axis.text = element_text(size = 20),
axis.title = element_text(size = 20, face = "bold")
)
# Crear un gráfico de líneas para las curvas de intensidad
ggplot(LargeData, aes(x = Day, y = Intensity, color = as.factor(Temp))) +
geom_line(size = 3) +
# Agregar puntos para resaltar la diferencia
geom_point(data = subset(LargeData, Temp == 30), aes(x = Day, y = Intensity), color = "red", size = 1) +
# Etiquetas y título
labs(title = "Difference in intensities between 15 and 30 degrees Celcius",
x = "Day",
y = "Intensity",
color = "Temperature") +
# Personalización opcional: tema y estilo
theme_minimal()+
theme(
text = element_text(size = 22),
axis.text = element_text(size = 20),
axis.title = element_text(size = 15, face = "bold")
)
# Crear un gráfico de líneas para las curvas de intensidad
ggplot(LargeData, aes(x = Day, y = Intensity, color = as.factor(Temp))) +
geom_line(size = 4) +
# Agregar puntos para resaltar la diferencia
geom_point(data = subset(LargeData, Temp == 30), aes(x = Day, y = Intensity), color = "red", size = 1) +
# Etiquetas y título
labs(title = "Differences in intensities between 15°C and 30°C",
x = "Day",
y = "Intensity",
color = "Temperature") +
# Personalización opcional: tema y estilo
theme_minimal()+
theme(
text = element_text(size = 22),
axis.text = element_text(size = 20),
axis.title = element_text(size = 10, face = "bold")
)
# Crear un gráfico de líneas para las curvas de intensidad
ggplot(LargeData, aes(x = Day, y = Intensity, color = as.factor(Temp))) +
geom_line(size = 4) +
# Agregar puntos para resaltar la diferencia
geom_point(data = subset(LargeData, Temp == 30), aes(x = Day, y = Intensity), color = "red", size = 1) +
# Etiquetas y título
labs(title = "Differences in intensities between 15°C and 30°C",
x = "Day",
y = "Intensity",
color = "Temperature") +
# Personalización opcional: tema y estilo
theme_minimal()+
theme(
text = element_text(size = 22),
axis.text = element_text(size = 22),
axis.title = element_text(size = 10)
)
# Crear un gráfico de líneas para las curvas de intensidad
ggplot(LargeData, aes(x = Day, y = Intensity, color = as.factor(Temp))) +
geom_line(size = 4) +
# Agregar puntos para resaltar la diferencia
geom_point(data = subset(LargeData, Temp == 30), aes(x = Day, y = Intensity), color = "red", size = 1) +
# Etiquetas y título
labs(title = "Differences in intensities between 15°C and 30°C",
x = "Day",
y = "Intensity",
color = "Temperature") +
# Personalización opcional: tema y estilo
theme_minimal()+
theme(
text = element_text(size = 10),
axis.text = element_text(size = 22),
axis.title = element_text(size = 22)
)
# Crear un gráfico de líneas para las curvas de intensidad
ggplot(LargeData, aes(x = Day, y = Intensity, color = as.factor(Temp))) +
geom_line(size = 4) +
# Agregar puntos para resaltar la diferencia
geom_point(data = subset(LargeData, Temp == 30), aes(x = Day, y = Intensity), color = "red", size = 1) +
# Etiquetas y título
labs(title = "Differences in intensities between 15°C and 30°C",
x = "Day",
y = "Intensity",
color = "Temperature") +
# Personalización opcional: tema y estilo
theme_minimal()+
theme(
text = element_text(size = 15),
axis.text = element_text(size = 22),
axis.title = element_text(size = 22)
)
# Crear un gráfico de líneas para las curvas de intensidad
ggplot(LargeData, aes(x = Day, y = Intensity, color = as.factor(Temp))) +
geom_line(size = 4) +
# Agregar puntos para resaltar la diferencia
geom_point(data = subset(LargeData, Temp == 30), aes(x = Day, y = Intensity), color = "red", size = 2) +
# Etiquetas y título
labs(title = "Differences in intensities between 15°C and 30°C",
x = "Day",
y = "Intensity",
color = "Temperature") +
# Personalización opcional: tema y estilo
theme_minimal()+
theme(
text = element_text(size = 22),
axis.text = element_text(size = 22),
axis.title = element_text(size = 22)
)
# Instalar y cargar el paquete emmeans (si no está instalado)
# install.packages("emmeans")
library(emmeans)
day_comparison <- emmeans(model_mixed_lme, pairwise ~ Temp | Day)
day_comparison <- emmeans(model_mix_nlme, pairwise ~ Temp | Day)
# Mostrar resumen de comparaciones
summary(day_comparison)
day_comparison <- emmeans(model_mix_nlme, pairwise ~ Temp | Day)
# Mostrar resumen de comparaciones
summary(day_comparison)
View(day_comparison)
View(model_mix_nlme)
# Instalar y cargar el paquete multcomp (si no está instalado)
# install.packages("multcomp")
library(multcomp)
# Instalar y cargar el paquete multcomp (si no está instalado)
# install.packages("multcomp")
library(multcomp)
# Realizar comparaciones específicas para ciertos días
comparaciones_dias <- glht(model_mix_nlme, linfct = mcp(Temp = "Tukey"))
# Realizar comparaciones específicas para ciertos días
comparaciones_dias <- glht(model_mix_nlme, linfct = mcp(Temp = "Tukey"))
# Convertir 'Temp' a factor si aún no lo es
datos$Temp <- as.factor(datos$Temp)
# Convertir 'Temp' a factor si aún no lo es
datos$Temp <- LargeData(LargeData$Temp)
# Convertir 'Temp' a factor si aún no lo es
LargeData$Temp <- as.factor(LargeData$Temp)
# Realizar comparaciones específicas para ciertos días
comparaciones_dias <- glht(modelo_mixto_lme, linfct = mcp(Temp = "Tukey"))
comparaciones_dias <- glht(model_mix_nlme, linfct = mcp(Temp = "Tukey"))
# Convertir 'Temp' a factor si aún no lo es
LargeData$Temp <- as.factor(LargeData$Temp)
model_mix_nlme <- lme(Intensity ~ Temp * Day, random = ~1 | Mass, data = LargeData)
comparaciones_dias <- glht(model_mix_nlme, linfct = mcp(Temp = "Tukey"))
summary(comparaciones_dias)
comparaciones_dia <- emmeans(model_mix_nlme, pairwise ~ Temp | Day)
summary(comparaciones_dia)
View(comparaciones_dia)
# Realizar comparaciones específicas para cada día
comparaciones_dia <- emmeans(model_mix_nlme, pairwise ~ Temperature, by = "Day")
# Realizar comparaciones específicas para cada día
comparaciones_dia <- emmeans(model_mix_nlme, pairwise ~ Temp, by = "Day")
# Mostrar resumen de comparaciones para cada día
summary(comparaciones_dia)
# Obtener las medias estimadas para cada combinación de Temp y Day
means <- emmeans(model_mix_nlme, ~ Temp:Day)
# Realizar comparaciones específicas para cada día
comparaciones_dia <- contrast(means, method = "pairwise", by = "Day")
# Mostrar resumen de comparaciones para cada día
summary(comparaciones_dia)
View(comparaciones_dia)
View(comparaciones_dias)
# Obtener los valores únicos de 'Day'
unique_days <- unique(LargeData$Day)
# Lista para almacenar los resultados de las comparaciones
comparation_results <- list()
# Realizar comparaciones específicas para cada día
for (day in unique_days) {
# Ajustar el modelo para el día específico
model_day <- lme(Intensity ~ Temp, random = ~1 | Mass, data = subset(LargeData, Day == day))
# Obtener las medias estimadas
means_day <- emmeans(model_day, ~ Temp)
# Realizar comparaciones
comparations_day <- contrast(means_day, method = "pairwise")
# Almacenar resultados en la lista
comparation_results[[as.character(day)]] <- comparations_day
}
# Ajustar el modelo para el día específico
#model_day <- lme(Intensity ~ Temp, random = ~1 | Mass, data = subset(LargeData, Day == day))
# Ajustar el modelo con un método de optimización diferente
model_day <- lme(Intensity ~ Temp, random = ~1 | Mass, data = LargeData, control = lmeControl(opt = "nloptwrap"))
# Ajustar el modelo con el método "optim" y la variante "L-BFGS-B"
modelo_mixto <- lme(Intensity ~ Temp, random = ~1 | Mass, data = LargeData, control = lmeControl(opt = "optim", optCtrl = list(method = "L-BFGS-B")))
# Realizar comparaciones específicas para cada día
for (day in unique_days) {
# Ajustar el modelo para el día específico
model_day <- lme(Intensity ~ Temp, random = ~1 | Mass, data = subset(LargeData, Day == day))
# Ajustar el modelo con un método de optimización diferente
#model_day <- lme(Intensity ~ Temp, random = ~1 | Mass, data = LargeData, control = lmeControl(opt = "nloptwrap"))
model_day<- lme(Intensity ~ Temp, random = ~1 | Mass, data = LargeData, control = lmeControl(opt = "optim", optCtrl = list(method = "L-BFGS-B")))
# Obtener las medias estimadas
means_day <- emmeans(model_day, ~ Temp)
# Realizar comparaciones
comparations_day <- contrast(means_day, method = "pairwise")
# Almacenar resultados en la lista
comparation_results[[as.character(day)]] <- comparations_day
}
# Obtener los valores únicos de 'Day'
unique_days <- unique(LargeData$Day)
# Lista para almacenar los resultados de las comparaciones
comparation_results <- list()
# Realizar comparaciones específicas para cada día
for (day in unique_days) {
# Ajustar el modelo para el día específico
model_day <- lme(Intensity ~ Temp, random = ~1 | Mass, data = subset(LargeData, Day == day))
# Ajustar el modelo con un método de optimización diferente
#model_day <- lme(Intensity ~ Temp, random = ~1 | Mass, data = LargeData, control = lmeControl(opt = "nloptwrap"))
model_day<- lme(Intensity ~ Temp, random = ~1 | Mass, data = LargeData, control = lmeControl(opt = "optim", optCtrl = list(method = "L-BFGS-B")))
# Obtener las medias estimadas
means_day <- emmeans(model_day, ~ Temp)
# Realizar comparaciones
comparations_day <- contrast(means_day, method = "pairwise")
# Almacenar resultados en la lista
comparation_results[[as.character(day)]] <- comparations_day
}
# Supongamos que 'LargeData' es tu conjunto de datos
dias_unicos <- unique(LargeData$Day)
# Lista para almacenar los resultados de las pruebas
resultados_t_test <- list()
# Realizar pruebas t para cada día
for (dia in dias_unicos) {
# Subconjunto de datos para el día específico
subset_data <- subset(LargeData, Day == dia)
# Realizar prueba t para las temperaturas 30 y 15 grados
resultado_t_test <- t.test(subset_data$Intensity[subset_data$Temp == 30], subset_data$Intensity[subset_data$Temp == 15])
# Almacenar resultados en la lista
resultados_t_test[[as.character(dia)]] <- resultado_t_test
}
View(LargeData)
View(LargeData)
# Empiezo a comparar dia por dia
LargeData=LargeData[1:128425, ]
# Supongamos que 'LargeData' es tu conjunto de datos
dias_unicos <- unique(LargeData$Day)
# Lista para almacenar los resultados de las pruebas
resultados_t_test <- list()
# Realizar pruebas t para cada día
for (dia in dias_unicos) {
# Subconjunto de datos para el día específico
subset_data <- subset(LargeData, Day == dia)
# Realizar prueba t para las temperaturas 30 y 15 grados
resultado_t_test <- t.test(subset_data$Intensity[subset_data$Temp == 30], subset_data$Intensity[subset_data$Temp == 15])
# Almacenar resultados en la lista
resultados_t_test[[as.character(dia)]] <- resultado_t_test
}
# Mostrar resumen de resultados
for (dia in dias_unicos) {
cat("Resumen para el día", dia, ":\n")
print(resultados_t_test[[as.character(dia)]])
cat("\n")
}
# Mostrar resumen de resultados
for (dia in dias_unicos) {
cat("Summary for the day", dia, ":\n")
print(resultados_t_test[[as.character(dia)]])
cat("\n")
}
LargeData <- X %>%
pivot_longer(cols = -c(Name, Date, Day, Temp), names_to = "Mass", values_to = "Intensity")
View(LargeData)
View(LargeData)
LargeData=LargeData[139816:170885, ]
# Supongamos que 'LargeData' es tu conjunto de datos
dias_unicos <- unique(LargeData$Day)
# Lista para almacenar los resultados de las pruebas
resultados_t_test <- list()
# Realizar pruebas t para cada día
for (dia in dias_unicos) {
# Subconjunto de datos para el día específico
subset_data <- subset(LargeData, Day == dia)
# Realizar prueba t para las temperaturas 30 y 15 grados
resultado_t_test <- t.test(subset_data$Intensity[subset_data$Temp == 30], subset_data$Intensity[subset_data$Temp == 15])
# Almacenar resultados en la lista
resultados_t_test[[as.character(dia)]] <- resultado_t_test
}
# Mostrar resumen de resultados
for (dia in dias_unicos) {
cat("Summary for the day", dia, ":\n")
print(resultados_t_test[[as.character(dia)]])
cat("\n")
}
LargeData <- X %>%
pivot_longer(cols = -c(Name, Date, Day, Temp), names_to = "Mass", values_to = "Intensity")
View(LargeData)
LargeData=LargeData[180446:188810, ]
# Supongamos que 'LargeData' es tu conjunto de datos
dias_unicos <- unique(LargeData$Day)
# Lista para almacenar los resultados de las pruebas
resultados_t_test <- list()
# Realizar pruebas t para cada día
for (dia in dias_unicos) {
# Subconjunto de datos para el día específico
subset_data <- subset(LargeData, Day == dia)
# Realizar prueba t para las temperaturas 30 y 15 grados
resultado_t_test <- t.test(subset_data$Intensity[subset_data$Temp == 30], subset_data$Intensity[subset_data$Temp == 15])
# Almacenar resultados en la lista
resultados_t_test[[as.character(dia)]] <- resultado_t_test
}
# Mostrar resumen de resultados
for (dia in dias_unicos) {
cat("Summary for the day", dia, ":\n")
print(resultados_t_test[[as.character(dia)]])
cat("\n")
}
