# Guardar el gráfico en formato TIFF con resolución de 300 ppp
tiff("loading_plots_pc1.tiff", width = 6, height = 4, units = 'in', res = 300) # Tamaño del gráfico en pulgadas
par(mar = c(5, 4, 4, 2) + 0.1) # Ajustar los márgenes para que el gráfico sea más pequeño
barplot(t(loadings_df),
main = "Loading Plots - PC 1",      # Título del gráfico
xlab = "Wavelength (nm)",          # Etiqueta del eje x
ylab = "Loading",                  # Etiqueta del eje y
col = c("steelblue", "forestgreen", "firebrick"),  # Colores de las barras
ylim = c(-0.4, 0.4),               # Límites del eje y
beside = FALSE,                    # Apilar las barras
legend.text = TRUE,                # Mostrar etiquetas en la leyenda
args.legend = list(x = "topright", cex = 0.45),# Ubicación de la leyenda y tamaño del texto
cex.axis = 0.8,                    # Tamaño de la fuente del eje x
cex.lab = 0.8,                     # Tamaño de la fuente de las etiquetas de los ejes
cex.main = 1)                      # Tamaño de la fuente del título
loadings_pc3C <- pcaloadingsC[, 1]
#loadings_pc3P <- pcaloadingsP[, 1]
loadings_pc3B <- pcaloadingsB[, 1]
# Crear un dataframe con los loadings del PC 3 de los tres conjuntos de datos
loadings_df <- data.frame(Cappricia = loadings_pc3C,
Brioso = loadings_pc3B)
# Obtener los nombres de las variables del dataframe
variable_names <- colnames(loadings_df)
# Graficar el Loading plot con un diagrama de barras apiladas
p <- barplot(t(loadings_df),
main = "Loading Plots - PC 1",      # Título del gráfico
xlab = "Wavelength (nm)",          # Etiqueta del eje x
ylab = "Loading",                  # Etiqueta del eje y
col = c("steelblue", "forestgreen", "firebrick"),  # Colores de las barras
ylim = c(-0.5, 0.5),               # Límites del eje y
beside = FALSE,                    # Apilar las barras
legend.text = TRUE,                # Mostrar etiquetas en la leyenda
args.legend = list(x = "topright", cex = 0.8))# Ubicación de la leyenda y tamaño del texto
# Ajustar el tamaño del gráfico
png("tmp.png", width = 6, height = 4, units = 'in', res = 300) # Tamaño del gráfico en pulgadas
par(mar = c(5, 4, 4, 2) + 0.1) # Ajustar los márgenes para que el gráfico sea más pequeño
barplot(t(loadings_df),
main = "Loading Plots - PC 1",      # Título del gráfico
xlab = "Wavelength (nm)",          # Etiqueta del eje x
ylab = "Loading",                  # Etiqueta del eje y
col = c("steelblue", "forestgreen", "firebrick"),  # Colores de las barras
ylim = c(-0.5, 0.5),               # Límites del eje y
beside = FALSE,                    # Apilar las barras
legend.text = TRUE,                # Mostrar etiquetas en la leyenda
args.legend = list(x = "topright", cex = 0.8),# Ubicación de la leyenda y tamaño del texto
cex.axis = 0.8,                    # Tamaño de la fuente del eje x
cex.lab = 0.8,                     # Tamaño de la fuente de las etiquetas de los ejes
cex.main = 1)                      # Tamaño de la fuente del título
dev.off()
# Guardar el gráfico en formato TIFF con resolución de 300 ppp
tiff("loading_plots_pc1.tiff", width = 6, height = 4, units = 'in', res = 300) # Tamaño del gráfico en pulgadas
par(mar = c(5, 4, 4, 2) + 0.1) # Ajustar los márgenes para que el gráfico sea más pequeño
barplot(t(loadings_df),
main = "Loading Plots - PC 1",      # Título del gráfico
xlab = "Wavelength (nm)",          # Etiqueta del eje x
ylab = "Loading",                  # Etiqueta del eje y
col = c("steelblue", "forestgreen", "firebrick"),  # Colores de las barras
ylim = c(-0.5, 0.5),               # Límites del eje y
beside = FALSE,                    # Apilar las barras
legend.text = TRUE,                # Mostrar etiquetas en la leyenda
args.legend = list(x = "topright", cex = 0.45),# Ubicación de la leyenda y tamaño del texto
cex.axis = 0.8,                    # Tamaño de la fuente del eje x
cex.lab = 0.8,                     # Tamaño de la fuente de las etiquetas de los ejes
cex.main = 1)                      # Tamaño de la fuente del título
dev.off()
loadings_pc3C <- pcaloadingsC[, 1]
#loadings_pc3P <- pcaloadingsP[, 1]
loadings_pc3B <- pcaloadingsB[, 1]
# Crear un dataframe con los loadings del PC 3 de los tres conjuntos de datos
loadings_df <- data.frame(Cappricia = loadings_pc3C,
Brioso = loadings_pc3B)
# Obtener los nombres de las variables del dataframe
variable_names <- colnames(loadings_df)
# Graficar el Loading plot con un diagrama de barras apiladas
p <- barplot(t(loadings_df),
main = "Loading Plots - PC 1",      # Título del gráfico
xlab = "Wavelength (nm)",          # Etiqueta del eje x
ylab = "Loading",                  # Etiqueta del eje y
col = c("steelblue", "forestgreen", "firebrick"),  # Colores de las barras
ylim = c(-0.3, 0.3),               # Límites del eje y
beside = FALSE,                    # Apilar las barras
legend.text = TRUE,                # Mostrar etiquetas en la leyenda
args.legend = list(x = "topright", cex = 0.8))# Ubicación de la leyenda y tamaño del texto
# Ajustar el tamaño del gráfico
png("tmp.png", width = 6, height = 4, units = 'in', res = 300) # Tamaño del gráfico en pulgadas
par(mar = c(5, 4, 4, 2) + 0.1) # Ajustar los márgenes para que el gráfico sea más pequeño
barplot(t(loadings_df),
main = "Loading Plots - PC 1",      # Título del gráfico
xlab = "Wavelength (nm)",          # Etiqueta del eje x
ylab = "Loading",                  # Etiqueta del eje y
col = c("steelblue", "forestgreen", "firebrick"),  # Colores de las barras
ylim = c(-0.3, 0.3),               # Límites del eje y
beside = FALSE,                    # Apilar las barras
legend.text = TRUE,                # Mostrar etiquetas en la leyenda
args.legend = list(x = "topright", cex = 0.8),# Ubicación de la leyenda y tamaño del texto
cex.axis = 0.8,                    # Tamaño de la fuente del eje x
cex.lab = 0.8,                     # Tamaño de la fuente de las etiquetas de los ejes
cex.main = 1)                      # Tamaño de la fuente del título
dev.off()
# Guardar el gráfico en formato TIFF con resolución de 300 ppp
tiff("loading_plots_pc1.tiff", width = 6, height = 4, units = 'in', res = 300) # Tamaño del gráfico en pulgadas
par(mar = c(5, 4, 4, 2) + 0.1) # Ajustar los márgenes para que el gráfico sea más pequeño
barplot(t(loadings_df),
main = "Loading Plots - PC 1",      # Título del gráfico
xlab = "Wavelength (nm)",          # Etiqueta del eje x
ylab = "Loading",                  # Etiqueta del eje y
col = c("steelblue", "forestgreen", "firebrick"),  # Colores de las barras
ylim = c(-0.3, 0.3),               # Límites del eje y
beside = FALSE,                    # Apilar las barras
legend.text = TRUE,                # Mostrar etiquetas en la leyenda
args.legend = list(x = "topright", cex = 0.45),# Ubicación de la leyenda y tamaño del texto
cex.axis = 0.8,                    # Tamaño de la fuente del eje x
cex.lab = 0.8,                     # Tamaño de la fuente de las etiquetas de los ejes
cex.main = 1)                      # Tamaño de la fuente del título
dev.off()
#loadings_pc3C <- pcaloadingsC[, 1]
loadings_pc3P <- pcaloadingsP[, 1]
loadings_pc3B <- pcaloadingsB[, 1]
# Crear un dataframe con los loadings del PC 3 de los tres conjuntos de datos
loadings_df <- data.frame(Provine = loadings_pc3P,
Brioso = loadings_pc3B)
# Obtener los nombres de las variables del dataframe
variable_names <- colnames(loadings_df)
# Graficar el Loading plot con un diagrama de barras apiladas
p <- barplot(t(loadings_df),
main = "Loading Plots - PC 1",      # Título del gráfico
xlab = "Wavelength (nm)",          # Etiqueta del eje x
ylab = "Loading",                  # Etiqueta del eje y
col = c("steelblue", "forestgreen", "firebrick"),  # Colores de las barras
ylim = c(-0.3, 0.3),               # Límites del eje y
beside = FALSE,                    # Apilar las barras
legend.text = TRUE,                # Mostrar etiquetas en la leyenda
args.legend = list(x = "topright", cex = 0.8))# Ubicación de la leyenda y tamaño del texto
#loadings_pc3C <- pcaloadingsC[, 1]
loadings_pc3P <- pcaloadingsP[, 1]
loadings_pc3B <- pcaloadingsB[, 1]
# Crear un dataframe con los loadings del PC 3 de los tres conjuntos de datos
loadings_df <- data.frame(Provine = loadings_pc3P,
Brioso = loadings_pc3B)
# Obtener los nombres de las variables del dataframe
variable_names <- colnames(loadings_df)
# Graficar el Loading plot con un diagrama de barras apiladas
p <- barplot(t(loadings_df),
main = "Loading Plots - PC 1",      # Título del gráfico
xlab = "Wavelength (nm)",          # Etiqueta del eje x
ylab = "Loading",                  # Etiqueta del eje y
col = c("steelblue", "forestgreen", "firebrick"),  # Colores de las barras
ylim = c(-0.2, 0.2),               # Límites del eje y
beside = FALSE,                    # Apilar las barras
legend.text = TRUE,                # Mostrar etiquetas en la leyenda
args.legend = list(x = "topright", cex = 0.8))# Ubicación de la leyenda y tamaño del texto
# Ajustar el tamaño del gráfico
png("tmp.png", width = 6, height = 4, units = 'in', res = 300) # Tamaño del gráfico en pulgadas
par(mar = c(5, 4, 4, 2) + 0.1) # Ajustar los márgenes para que el gráfico sea más pequeño
barplot(t(loadings_df),
main = "Loading Plots - PC 1",      # Título del gráfico
xlab = "Wavelength (nm)",          # Etiqueta del eje x
ylab = "Loading",                  # Etiqueta del eje y
col = c("steelblue", "forestgreen", "firebrick"),  # Colores de las barras
ylim = c(-0.2, 0.2),               # Límites del eje y
beside = FALSE,                    # Apilar las barras
legend.text = TRUE,                # Mostrar etiquetas en la leyenda
args.legend = list(x = "topright", cex = 0.8),# Ubicación de la leyenda y tamaño del texto
cex.axis = 0.8,                    # Tamaño de la fuente del eje x
cex.lab = 0.8,                     # Tamaño de la fuente de las etiquetas de los ejes
cex.main = 1)                      # Tamaño de la fuente del título
dev.off()
# Guardar el gráfico en formato TIFF con resolución de 300 ppp
tiff("loading_plots_pc1P.tiff", width = 6, height = 4, units = 'in', res = 300) # Tamaño del gráfico en pulgadas
par(mar = c(5, 4, 4, 2) + 0.1) # Ajustar los márgenes para que el gráfico sea más pequeño
barplot(t(loadings_df),
main = "Loading Plots - PC 1",      # Título del gráfico
xlab = "Wavelength (nm)",          # Etiqueta del eje x
ylab = "Loading",                  # Etiqueta del eje y
col = c("steelblue", "forestgreen", "firebrick"),  # Colores de las barras
ylim = c(-0.2, 0.2),               # Límites del eje y
beside = FALSE,                    # Apilar las barras
legend.text = TRUE,                # Mostrar etiquetas en la leyenda
args.legend = list(x = "topright", cex = 0.45),# Ubicación de la leyenda y tamaño del texto
cex.axis = 0.8,                    # Tamaño de la fuente del eje x
cex.lab = 0.8,                     # Tamaño de la fuente de las etiquetas de los ejes
cex.main = 1)                      # Tamaño de la fuente del título
dev.off()
loadings_pc3C <- pcaloadingsC[, 1]
loadings_pc3P <- pcaloadingsP[, 1]
# Crear un dataframe con los loadings del PC 3 de los tres conjuntos de datos
loadings_df <- data.frame(Provine = loadings_pc3P,
Cappricia = loadings_pc3C)
# Obtener los nombres de las variables del dataframe
variable_names <- colnames(loadings_df)
# Graficar el Loading plot con un diagrama de barras apiladas
p <- barplot(t(loadings_df),
main = "Loading Plots - PC 1",      # Título del gráfico
xlab = "Wavelength (nm)",          # Etiqueta del eje x
ylab = "Loading",                  # Etiqueta del eje y
col = c("steelblue", "forestgreen", "firebrick"),  # Colores de las barras
ylim = c(-0.2, 0.2),               # Límites del eje y
beside = FALSE,                    # Apilar las barras
legend.text = TRUE,                # Mostrar etiquetas en la leyenda
args.legend = list(x = "topright", cex = 0.8))# Ubicación de la leyenda y tamaño del texto
# Ajustar el tamaño del gráfico
png("tmp.png", width = 6, height = 4, units = 'in', res = 300) # Tamaño del gráfico en pulgadas
par(mar = c(5, 4, 4, 2) + 0.1) # Ajustar los márgenes para que el gráfico sea más pequeño
barplot(t(loadings_df),
main = "Loading Plots - PC 1",      # Título del gráfico
xlab = "Wavelength (nm)",          # Etiqueta del eje x
ylab = "Loading",                  # Etiqueta del eje y
col = c("steelblue", "forestgreen", "firebrick"),  # Colores de las barras
ylim = c(-0.2, 0.2),               # Límites del eje y
beside = FALSE,                    # Apilar las barras
legend.text = TRUE,                # Mostrar etiquetas en la leyenda
args.legend = list(x = "topright", cex = 0.8),# Ubicación de la leyenda y tamaño del texto
cex.axis = 0.8,                    # Tamaño de la fuente del eje x
cex.lab = 0.8,                     # Tamaño de la fuente de las etiquetas de los ejes
cex.main = 1)                      # Tamaño de la fuente del título
dev.off()
# Guardar el gráfico en formato TIFF con resolución de 300 ppp
tiff("loading_plots_pc1C.tiff", width = 6, height = 4, units = 'in', res = 300) # Tamaño del gráfico en pulgadas
par(mar = c(5, 4, 4, 2) + 0.1) # Ajustar los márgenes para que el gráfico sea más pequeño
barplot(t(loadings_df),
main = "Loading Plots - PC 1",      # Título del gráfico
xlab = "Wavelength (nm)",          # Etiqueta del eje x
ylab = "Loading",                  # Etiqueta del eje y
col = c("steelblue", "forestgreen", "firebrick"),  # Colores de las barras
ylim = c(-0.2, 0.2),               # Límites del eje y
beside = FALSE,                    # Apilar las barras
legend.text = TRUE,                # Mostrar etiquetas en la leyenda
args.legend = list(x = "topright", cex = 0.45),# Ubicación de la leyenda y tamaño del texto
cex.axis = 0.8,                    # Tamaño de la fuente del eje x
cex.lab = 0.8,                     # Tamaño de la fuente de las etiquetas de los ejes
cex.main = 1)                      # Tamaño de la fuente del título
dev.off()
dev.off()
# Instalar DiagrammeR si no lo tienes instalado
install.packages("DiagrammeR")
# Cargar la librería
library(DiagrammeR)
# Cargar la librería
library(DiagrammeR)
# Crear un gráfico de flujo
graph <- create_graph()
# Agregar nodos al gráfico
graph %>%
add_node("Inicio", shape = "circle") %>%
add_node("Proceso1", shape = "rectangle") %>%
add_node("Proceso2", shape = "rectangle") %>%
add_node("Fin", shape = "circle")
# Agregar conexiones entre los nodos
graph %>%
add_edge("Inicio", "Proceso1") %>%
add_edge("Proceso1", "Proceso2") %>%
add_edge("Proceso2", "Fin")
# Visualizar el gráfico de flujo
graph
# Crear un gráfico de flujo
graph <- create_graph()
# Agregar nodos al gráfico
graph %>%
add_node("Spectra visualization", shape = "rectangle") %>%
add_node("Outlier removal", shape = "rectangle") %>%
add_node("Spectra pretreatment", shape = "rectangle") %>%
add_node("Outlier removal (back to 2)", shape = "rectangle") %>%
add_node("Data set Split", shape = "rectangle") %>%
add_node("Feature Selection A", shape = "rectangle") %>%
add_node("Feature Selection B", shape = "rectangle") %>%
add_node("CovSel Train Split", shape = "rectangle") %>%
add_node("PLSDA optimization of Latent Variables", shape = "rectangle") %>%
add_node("PLSDA model validation", shape = "rectangle")
# Agregar nodos al gráfico
graph %>%
add_node("Spectra visualization") %>%
add_node("Outlier removal") %>%
add_node("Spectra pretreatment") %>%
add_node("Outlier removal (back to 2)") %>%
add_node("Data set Split") %>%
add_node("Feature Selection A") %>%
add_node("Feature Selection B") %>%
add_node("CovSel Train Split") %>%
add_node("PLSDA optimization of Latent Variables") %>%
add_node("PLSDA model validation")
# Agregar conexiones entre los nodos
graph %>%
add_edge("Spectra visualization", "Outlier removal") %>%
add_edge("Outlier removal", "Spectra pretreatment") %>%
add_edge("Spectra pretreatment", "Outlier removal (back to 2)") %>%
add_edge("Outlier removal (back to 2)", "Data set Split") %>%
add_edge("Data set Split", "Feature Selection A") %>%
add_edge("Feature Selection A", "Feature Selection B") %>%
add_edge("Feature Selection B", "CovSel Train Split") %>%
add_edge("CovSel Train Split", "PLSDA optimization of Latent Variables") %>%
add_edge("PLSDA optimization of Latent Variables", "PLSDA model validation")
# Agregar nodos al gráfico
graph <- graph %>%
add_node("Spectra visualization") %>%
add_node("Outlier removal") %>%
add_node("Spectra pretreatment") %>%
add_node("Outlier removal (back to 2)") %>%
add_node("Data set Split") %>%
add_node("Feature Selection A") %>%
add_node("Feature Selection B") %>%
add_node("CovSel Train Split") %>%
add_node("PLSDA optimization of Latent Variables") %>%
add_node("PLSDA model validation")
# Agregar conexiones entre los nodos
graph <- graph %>%
add_edge("Spectra visualization", "Outlier removal") %>%
add_edge("Outlier removal", "Spectra pretreatment") %>%
add_edge("Spectra pretreatment", "Outlier removal (back to 2)") %>%
add_edge("Outlier removal (back to 2)", "Data set Split") %>%
add_edge("Data set Split", "Feature Selection A") %>%
add_edge("Feature Selection A", "Feature Selection B") %>%
add_edge("Feature Selection B", "CovSel Train Split") %>%
add_edge("CovSel Train Split", "PLSDA optimization of Latent Variables") %>%
add_edge("PLSDA optimization of Latent Variables", "PLSDA model validation")
# Agregar nodos al gráfico
graph <- graph %>%
add_node("Spectra visualization") %>%
add_node("Outlier removal") %>%
add_node("Spectra pretreatment") %>%
add_node("Outlier removal (back to 2)") %>%
add_node("Data set Split") %>%
add_node("Feature Selection A") %>%
add_node("Feature Selection B") %>%
add_node("CovSel Train Split") %>%
add_node("PLSDA optimization of Latent Variables") %>%
add_node("PLSDA model validation")
# Agregar conexiones entre los nodos
graph <- graph %>%
add_edge("Spectra visualization", "Outlier removal") %>%
add_edge("Outlier removal", "Spectra pretreatment") %>%
add_edge("Spectra pretreatment", "Outlier removal (back to 2)") %>%
add_edge("Outlier removal (back to 2)", "Data set Split") %>%
add_edge("Data set Split", "Feature Selection A") %>%
add_edge("Feature Selection A", "Feature Selection B") %>%
add_edge("Feature Selection B", "CovSel Train Split") %>%
add_edge("CovSel Train Split", "PLSDA optimization of Latent Variables") %>%
add_edge("PLSDA optimization of Latent Variables", "PLSDA model validation")
# Instalar y cargar la librería
install.packages("DiagrammeRsvg")
library(DiagrammeRsvg)
library(DiagrammeRsvg)
# Crear el grafo
gr <- create_graph()
# Agregar nodos al grafo
gr <- add_node(gr, "Spectra visualization")
gr <- add_node(gr, "Outlier removal")
gr <- add_node(gr, "Spectra pretreatment")
gr <- add_node(gr, "Outlier removal (back to 2)")
gr <- add_node(gr, "Data set Split")
gr <- add_node(gr, "Feature Selection A")
gr <- add_node(gr, "Feature Selection B")
gr <- add_node(gr, "CovSel Train Split")
gr <- add_node(gr, "PLSDA optimization of Latent Variables")
gr <- add_node(gr, "PLSDA model validation")
# Agregar conexiones entre nodos
gr <- add_edge(gr, "Spectra visualization", "Outlier removal")
gr <- add_edge(gr, "Outlier removal", "Spectra pretreatment")
gr <- add_edge(gr, "Spectra pretreatment", "Outlier removal (back to 2)")
gr <- add_edge(gr, "Outlier removal (back to 2)", "Data set Split")
gr <- add_edge(gr, "Data set Split", "Feature Selection A")
gr <- add_edge(gr, "Feature Selection A", "Feature Selection B")
gr <- add_edge(gr, "Feature Selection B", "CovSel Train Split")
gr <- add_edge(gr, "CovSel Train Split", "PLSDA optimization of Latent Variables")
gr <- add_edge(gr, "PLSDA optimization of Latent Variables", "PLSDA model validation")
# Visualizar el grafo
gr
graph <- create_graph()
# Agregar nodos al grafo
nodes <- c("Inicio", "Paso 1", "Paso 2", "Paso 3", "Paso 4", "Paso 5", "Paso 6", "Paso 7", "Paso 8", "Fin")
graph <- add_nodes(graph, nodes)
# Crear el grafo
graph <- create_graph()
# Agregar nodos al grafo
nodes <- c("Inicio", "Paso 1", "Paso 2", "Paso 3", "Paso 4", "Paso 5", "Paso 6", "Paso 7", "Paso 8", "Fin")
graph <- add_node(graph, nodes)
# Agregar conexiones entre nodos
edges <- c(
c("Inicio", "Paso 1"),
c("Paso 1", "Paso 2"),
c("Paso 2", "Paso 3"),
c("Paso 3", "Paso 4"),
c("Paso 4", "Paso 5"),
c("Paso 5", "Paso 6"),
c("Paso 6", "Paso 7"),
c("Paso 7", "Paso 8"),
c("Paso 8", "Fin")
)
graph <- add_edge(graph, edges)
# Instalar y cargar la librería
install.packages("DiagrammeR")
install.packages("DiagrammeR")
library(DiagrammeR)
# Crear el grafo
graph <- create_graph()
# Agregar nodos al grafo
nodes <- c("Inicio", "Paso 1", "Paso 2", "Paso 3", "Paso 4", "Paso 5", "Paso 6", "Paso 7", "Paso 8", "Fin")
graph <- add_nodes(graph, nodes)
# Crear el grafo
graph <- create_graph()
# Agregar nodos al grafo
nodes <- c("Inicio", "Paso 1", "Paso 2", "Paso 3", "Paso 4", "Paso 5", "Paso 6", "Paso 7", "Paso 8", "Fin")
graph <- add_node(graph, nodes)
# Agregar conexiones entre nodos
edges <- c(
"Inicio" %->% "Paso 1",
"Paso 1" %->% "Paso 2",
"Paso 2" %->% "Paso 3",
"Paso 3" %->% "Paso 4",
"Paso 4" %->% "Paso 5",
"Paso 5" %->% "Paso 6",
"Paso 6" %->% "Paso 7",
"Paso 7" %->% "Paso 8",
"Paso 8" %->% "Fin"
)
# Agregar nodos al grafo
nodes <- c("Inicio", "Paso 1", "Paso 2", "Paso 3", "Paso 4", "Paso 5", "Paso 6", "Paso 7", "Paso 8", "Fin")
graph <- add_node(graph, nodes)
# Agregar conexiones entre nodos
edges <- c(
"Inicio", "Paso 1",
"Paso 1", "Paso 2",
"Paso 2", "Paso 3",
"Paso 3", "Paso 4",
"Paso 4", "Paso 5",
"Paso 5", "Paso 6",
"Paso 6", "Paso 7",
"Paso 7", "Paso 8",
"Paso 8", "Fin"
)
graph <- add_edge(graph, edges)
X=rbind(XC, XP, XC)
Y=rbind(YC,YP, YC)
colnames(XC)=colnames(XP)
colnames(YC)=colnames(YP)
colnames(XC)=colnames(XB)
colnames(XP)= colnames(XB)
colnames(YB)="Class"
colnames(YC)="Class"
colnames(YP)="Class"
X=rbind(XC, XP, XC)
Y=rbind(YC,YP, YC)
snvC=as.data.frame(snv(X))
#First or Second Derivative, to SNV or to raw data
SGC=as.data.frame(savgol(snvC,2,17,2))
# Cargar bibliotecas
library(FactoMineR)
library(ggplot2)
# Cargar datos de ejemplo (reemplazar con tus datos)
data <- SGC  # Ejemplo con el conjunto de datos Iris
# Realizar PCA
pca <- PCA(data, graph = FALSE)  # No graficar gráfico por defecto
# Biplot agrupando por variedades
biplot(pca, cex = 0.7, col.var = "blue", col.ind = as.numeric(iris$Species))
# Cargar las bibliotecas necesarias
library(FactoMineR)
library(ggplot2)
# Realizar PCA en el conjunto de datos X
pca <- PCA(X, graph = FALSE)  # graph = FALSE para que no trace automáticamente el gráfico
# Obtener las coordenadas de los individuos (observaciones) en los primeros dos componentes principales
pca_scores <- pca$ind$coord[, 1:2]
# Combinar las coordenadas de los individuos con los datos Y
data_combined <- cbind(pca_scores, Y)
# Crear un gráfico de dispersión de los scores de PCA, coloreando por las respuestas en Y
ggplot(data_combined, aes(x = Dim.1, y = Dim.2, color = Y)) +
geom_point() +
labs(x = paste0("PC1 (", round(pca$eig[1, "percentage"], 2) * 100, "%)"),
y = paste0("PC2 (", round(pca$eig[2, "percentage"], 2) * 100, "%)"),
color = "Response") +
ggtitle("PCA Score Plot con Respuestas") +
theme_minimal()
# Realizar PCA en el conjunto de datos X
pca <- PCA(X, graph = FALSE)  # graph = FALSE para que no trace automáticamente el gráfico
# Calcular explícitamente los porcentajes de varianza explicada
pca_variances <- pca$eig$values
# Cargar bibliotecas necesarias
library(FactoMineR)
library(ggplot2)
# Realizar PCA en el conjunto de datos X
pca <- PCA(X, graph = FALSE)  # graph = FALSE para que no trace automáticamente el gráfico
# Calcular los porcentajes de varianza explicada
pca_eigenvalues <- get_eigenvalue(pca)
pca_variances_prop <- pca_eigenvalues$values / sum(pca_eigenvalues$values)
# Cargar bibliotecas necesarias
library(FactoMineR)
library(ggplot2)
# Realizar PCA en el conjunto de datos X
pca <- PCA(X, graph = FALSE)  # graph = FALSE para que no trace automáticamente el gráfico
# Obtener los porcentajes de varianza explicada en los dos primeros componentes
pca_variances_prop_2 <- pca$eig$variance[1:2] / sum(pca$eig$values)
pca=prcomp(SGC, retx = TRUE, center = TRUE, scale. = TRUE, tol = NULL, rank.=20)
summary(pca)
##Calculate scores and loadings
pcascores <- pca$x
pcaloadings <- pca$rotation
PCAcolors <- c("#66c2a5","#fc8d62","#8da0cb", "#E5C494", "#B3B3B3")
plot(pcascores[,1:2], pch=21, col=PCAcolors, bg=PCAcolors, cex=1.5)
text(pcascores[,1:2],labels=rownames(pcascores))
plot(pcascores[,2:3], pch=21, col=PCAcolors, bg=PCAcolors, cex=1.5)
text(pcascores[,2:3],labels=rownames(pcascores))
plot(pcascores[,c(1,3)], pch=21, col=PCAcolors, bg=PCAcolors, cex=1.5)
text(pcascores[,c(1,3)],labels=rownames(pcascores))
plot(pcascores[,4:3], pch=21, col=PCAcolors, bg=PCAcolors, cex=1.5)
text(pcascores[,4:3],labels=rownames(pcascores))
plot(pcascores[,c(4,5)], pch=21, col=PCAcolors, bg=PCAcolors, cex=1.5)
text(pcascores[,c(4,5)],labels=rownames(pcascores))
plot(pcascores[,c(6,5)], pch=21, col=PCAcolors, bg=PCAcolors, cex=1.5)
text(pcascores[,c(6,5)],labels=rownames(pcascores))
plot(pcascores[,c(7,6)], pch=21, col=PCAcolors, bg=PCAcolors, cex=1.5)
text(pcascores[,c(7,6)],labels=rownames(pcascores))
plot(pcascores[,c(7,8)], pch=21, col=PCAcolors, bg=PCAcolors, cex=1.5)
text(pcascores[,c(7,8)],labels=rownames(pcascores))
summary(pca)
