pr <- predict(cs, newdata=xtest)
dim (fulldata)
head (fulldata)
smpl <- sample(1:nrow(fulldata), 5)
test <- pottery[fulldata, -113]
test <- fulldata[smpl, -113]
## predict new data
pr <- predict(cs, newdata=test)
View(test)
View(fulldata)
## predict new data
pr <- predict(cs, newdata=test)
smpl <- sample(1:nrow(fulldata), 30)
test <- fulldata[smpl, -113]
## predict new data
pr <- predict(cs, newdata=test)
View(cs)
## generate a sample from the pottery data set -
##  this will be the "new" data to be predicted
cs@pcaobj[0]
## generate a sample from the pottery data set -
##  this will be the "new" data to be predicted
cs@pcaobj[0]
View(cs)
## generate a sample from the pottery data set -
##  this will be the "new" data to be predicted
cs@pcaobj[1]
## generate a sample from the pottery data set -
##  this will be the "new" data to be predicted
cs@pcaobj[1]@sd
## generate a sample from the pottery data set -
##  this will be the "new" data to be predicted
cs@pcaobj@sd
print(cs@pcaobj)
print(cs@pcaobj[1])
library(rrcovHD)
print(cs@pcaobj[0])
print(cs@pcaobj)
## generate a sample from the pottery data set -
##  this will be the "new" data to be predicted
pcaObject= cs@pcaobj@sd
## generate a sample from the pottery data set -
##  this will be the "new" data to be predicted
pcaObject= cs@pcaobj
pcaObject$sd
pcaObject
View(pcaObject)
pcaObject$sd
pcaObject[1]
w=pcaObject[2]
View(w)
w=pcaObject[1][1]
View(w)
w=pcaObject[[1]]
View(w)
w$sd
## generate a sample from the pottery data set -
##  this will be the "new" data to be predicted
pcaObject= cs@pcaobj[[1]]
print(pcaObject)
print(pcaObject$sd)
View(w)
scoreplot(pcaObject)
print(pcaObject$sd)
scoreplot(pcaObject)
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
pcaObject.plot <- autoplot(pcaObject
)
pcaObject.plot <- plot(pcaObject, type="l")
pcaObject.plot <- plot(pcaObject, type="2")
fviz_pca_ind(pcaObject,
geom.ind = "point", # show points only (nbut not "text")
col.ind = iris$Species, # color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
install.packages(c("FactoMineR", "factoextra"))
library("FactoMineR")
library("factoextra")
fviz_pca_ind(pcaObject,
geom.ind = "point", # show points only (nbut not "text")
col.ind = iris$Species, # color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
fviz_pca_ind(pcaObject,
geom.ind = "point", # show points only (nbut not "text")
col.ind = iris$Species, # color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
sdout <- (ifelse(pcaObject$sd > pcaObject$cutoff.sd, 0, 1))
print (sdout)
dim (sdout)
count (sdout)
sdout <- (ifelse(pcaObject$sd < pcaObject$cutoff.sd, 0, 1))
(sdout)
sdout <- (ifelse(pcaObject$od < pcaObject$cutoff.od, 0, 1))
View(cs)
## Build the SIMCA model. Use RSimca for a robust version
fulldata =cbind(XC,YC)
cs = CSimca(formula = origin~., fulldata)
#Repeat the same procedure with the variety Cappricia
XC=read.csv(file3, row.names=1, check.names=FALSE)
row_names_df_to_remove<-c("i2T11S5", "i2T5S3", "i1T1S3", "i1T1S2")
row_names_df_to_remover<-c("i1T1S3", "i1T1S2")
YC=read.csv(file4, row.names=1)
YC=as.data.frame(YC[,12])
joinC=cbind(XC,YC)
cs = CSimca(formula = origin~., joinC)
cs
summary(cs)
smpl <- sample(1:nrow(joinC), 30)
test <- joinC[smpl, -113]
## generate a sample from the pottery data set -
##  this will be the "new" data to be predicted
pcaObject= cs@pcaobj[[1]]
print(pcaObject$sd)
fviz_pca_ind(pcaObject,
geom.ind = "point", # show points only (nbut not "text")
col.ind = iris$Species, # color by groups
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups"
)
pcaObject.plot <- plot(pcaObject, type="2")
sdout <- (ifelse(pcaObject$od < pcaObject$cutoff.od, 0, 1))
(sdout)
sdout <- (ifelse(pcaObject$SD < pcaObject$cutoff.SD, 0, 1))
sdout <- (ifelse(pcaObject$sd < pcaObject$cutoff.sd, 0, 1))
(sdout)
sdout <- (ifelse(pcaObject$od < pcaObject$cutoff.od, 0, 1))
(sdout)
setwd("C:/work/Mercedes/Serbia1024/Serbia/Data")
library(mdatools)
library(pcv)
file1= "BRIOSOa.csv"
file2="BRIOSOb.csv"
file3 = "CAPPRICIAa.csv"
file4="CAPPRICIAb.csv"
file5 = "PROVINEa.csv"
file6="PROVINEb.csv"
XBI=read.csv(file1, row.names=1, check.names = FALSE)
XB=XBI[,4:115]
row_names_df_to_remove1<-c("2599", "4038", "983", "3222", "3955", "3651", "440", "5160")
YB=read.csv(file2, row.names=1)
YB=as.data.frame(YB[,12])
joinB=cbind(XB,YB)
joinB=(joinB[!(row.names(joinB) %in% row_names_df_to_remove1),])
XB=joinB[,1:112]
YB=as.data.frame(joinB[,113])
XC=read.csv(file3, row.names=1, check.names = FALSE)
YC=read.csv(file4, row.names=1)
YC=as.data.frame(YC[,12])
joinC=cbind(XC,YC)
row_names_df_to_remove<-c("i2T11S5", "i2T5S3", "i1T1S3", "i1T1S2")
row_names_df_to_remover<-c("i1T1S3", "i1T1S2")
joinC=as.data.frame(joinC[!(row.names(joinC) %in% row_names_df_to_remove),])
joinC=as.data.frame(joinC[!(row.names(joinC) %in% row_names_df_to_remover),])
XC=joinC[,1:112]
YC=as.data.frame(joinC[,113])
XP=read.csv(file5, row.names=1, check.names = FALSE)
XP=XP[,4:115]
YP=read.csv(file6, row.names=1)
YP=as.data.frame(YP[,12])
joinP=cbind(XP,YP)
row_names_df_to_remove2<-c("7790", "9639", "0", "7232","10340", "1002", "4117")
joinP=joinP[!(row.names(joinP) %in% row_names_df_to_remove2),]
XP=joinP[,1:112]
YP=as.data.frame(joinP[,113])
colnames(XC)=colnames(XB)
colnames(XP)= colnames(XB)
colnames(XC)=colnames(XP)
colnames(YC)=colnames(YP)
colnames(YB)="Class"
colnames(YC)="Class"
colnames(YP)="Class"
X=rbind(XC, XP)
Y=rbind(YC,YP)
row.names(Y)=row.names(X)
join=cbind(Y,X)
nv=112
JoinSepals <- split(join, join$Class)
xtrain = data.frame()
ytrain = as.integer()
xtest = data.frame()
ytest = as.integer()
for (class in JoinSepals)
{
dt = sort(sample(nrow(class), nrow(class)*.7))
train<-class[dt,]
test<-class[-dt,]
tmpxtrain = train[,2:(nv+1)]
xtrain= rbind(xtrain,tmpxtrain)
tmpytrain =  train[,1]
ytrain=append (ytrain, tmpytrain)
tmpxtest = test[,2:(nv+1)]
xtest =  rbind(xtest,tmpxtest)
tmpytest =  test[,1]
ytest = append(ytest,tmpytest)
}
ytr = factor(ytrain, labels = c("Deaseased", "Healthy"))
yte = factor(ytest, labels = c("Deaseased", "Healthy"))
# make a plot with spectra
par(mfrow = c(2, 1))
mdaplot(xtrain, type = "l", cgroup = ytr, main = "Train")
mdaplot(xtest, type = "l", cgroup = yte, main = "Test")
S= simca(xtrain, "Healthy", ncomp = 3)
summary(S)
plot(S)
library(mdatools)
library(pcv)
file="BriosoaSIMCA.csv
# Import Brioso
XBI=read.csv(file, row.names=1, check.names = FALSE)
#Write the same column names for every matrix
colnames(XC)=colnames(XB)
colnames(XP)= colnames(XB)
colnames(XC)=colnames(XP)
colnames(YC)=colnames(YP)
colnames(YB)="Class"
file="BriosoaSIMCA.csv"
XBI=read.csv(file, row.names=1, check.names = FALSE)
View(XBI)
View(XBI)
xtrain=XBI[1:77,5:116]
View(xtrain)
View(XBI)
ytrain=XBI[1:77,4]
ytrain=as.data.frame(XBI[1:77,4])
View(ytrain)
xtrain=XBI[1:76,5:116]
ytrain=as.data.frame(XBI[1:76,4])
ytr = factor(ytrain, labels = c("Healthy"))
ytrain=as.data.frame(XBI[1:76,4])
ytr = factor(ytrain, labels = c("Healthy"))
ytrain=XBI[1:76,4]
ytr = factor(ytrain, labels = c("Healthy"))
# make a plot with spectra
par(mfrow = c(2, 1))
mdaplot(xtrain, type = "l", cgroup = ytr, main = "Train")
mdaplot(xtest, type = "l", cgroup = yte, main = "Test")
xtrain=XBI[77:159,5:116]
ytrain=XBI[77:159,4]
ytr = factor(ytrain, labels = c("Healthy"))
yte = factor(ytrain, labels = c("Diseased"))
# make a plot with spectra
par(mfrow = c(2, 1))
mdaplot(xtrain, type = "l", cgroup = ytr, main = "Train")
mdaplot(xtest, type = "l", cgroup = yte, main = "Test")
xtrain=XBI[1:76,5:116]
ytrain=XBI[1:76,4]
xtest=XBI[77:159,5:116]
ytest=XBI[77:159,4]
ytr = factor(ytrain, labels = c("Healthy"))
yte = factor(ytrain, labels = c("Diseased"))
# make a plot with spectra
par(mfrow = c(2, 1))
mdaplot(xtrain, type = "l", cgroup = ytr, main = "Train")
mdaplot(xtest, type = "l", cgroup = yte, main = "Test")
file="BriosoaSIMCA.csv"
XBI=read.csv(file, row.names=1, check.names = FALSE)
xtrain=XBI[1:76,5:116]
ytrain=XBI[1:76,4]
xtest=XBI[77:159,5:116]
ytest=XBI[77:159,4]
ytr = factor(ytrain, labels = c("Healthy"))
yte = factor(ytrain, labels = c("Diseased"))
# make a plot with spectra
par(mfrow = c(2, 1))
mdaplot(xtrain, type = "l", cgroup = ytr, main = "Train")
# make a plot with spectra
par(mfrow = c(1, 2))
mdaplot(xtrain, type = "l", cgroup = ytr, main = "Train")
mdaplot(xtest, type = "l", cgroup = yte, main = "Test")
ytr = factor(ytrain, labels = c("Healthy"))
yte = factor(ytest, labels = c("Diseased"))
# make a plot with spectra
par(mfrow = c(1, 2))
mdaplot(xtrain, type = "l", cgroup = ytr, main = "Train")
mdaplot(xtest, type = "l", cgroup = yte, main = "Test")
S= simca(xtrain, "Healthy", ncomp = 3)
summary(S)
plot(S)
layout(matrix(c(1, 3, 2, 3), ncol = 2))
plotSensitivity(S, show.labels = TRUE)
plotMisclassified(S, show.labels = TRUE)
plotPredictions(S, show.labels = TRUE)
Xpv = pcvpca(as.matrix(xtrain), 4, center = TRUE, scale = TRUE, cv = list("ven", 4))
S = simca(xtrain, "Diseased", ncomp = 3, x.test = Xpv)
par(mfrow = c(1, 2))
plotSensitivity(S, show.line = c(NA, 0.95))
plotVariance(S, type = "h", show.labels = TRUE)
S = selectCompNum(S, 1)
summary(S)
plotPredictions(S, show.labels = TRUE)
Xpv = pcvpca(as.matrix(xtrain), 4, center = TRUE, scale = TRUE, cv = list("ven", 4))
m = simca(xtrain, "versicolor", ncomp = 3, x.test = xtest)
par(mfrow = c(1, 2))
plotSensitivity(m, show.line = c(NA, 0.95))
plotVariance(m, type = "h", show.labels = TRUE)
m = selectCompNum(m, 2)
summary(m)
res = predict(m, xtest, ytest)
res = predict(m, xtest, yte)
summary(res)
par(mfrow = c(2, 2))
plotSpecificity(res, show.labels = TRUE)
plotSensitivity(res, show.labels = TRUE)
plotMisclassified(res, show.labels = TRUE)
plotPredictions(res)
show(getConfusionMatrix(res))
show(round(res$p.pred[45:55, 1:3, 1], 4))
par(mfrow = c(2, 1))
plotProbabilities(res, cgroup = ct)
plotProbabilities(res, cgroup = yte)
plotProbabilities(res, ncomp = 2, cgroup = yte)
file="BriosoaSIMCA.csv"
XBI=read.csv(file, row.names=1, check.names = FALSE)
xtrain=XBI[1:76,5:116]
ytrain=XBI[1:76,4]
xtrain=snv(xtrain)
xtest=XBI[77:159,5:116]
ytest=XBI[77:159,4]
xtest=snv(xtest)
ytr = factor(ytrain, labels = c("Healthy"))
yte = factor(ytest, labels = c("Diseased"))
# make a plot with spectra
par(mfrow = c(1, 2))
mdaplot(xtrain, type = "l", cgroup = ytr, main = "Train")
mdaplot(xtest, type = "l", cgroup = yte, main = "Test")
S= simca(xtrain, "Healthy", ncomp = 3)
summary(S)
plot(S)
layout(matrix(c(1, 3, 2, 3), ncol = 2))
plotSensitivity(S, show.labels = TRUE)
plotMisclassified(S, show.labels = TRUE)
plotPredictions(S, show.labels = TRUE)
library(pcv)
Xpv = pcvpca(as.matrix(xtrain), 4, center = TRUE, scale = TRUE, cv = list("ven", 4))
m = simca(xtrain, "versicolor", ncomp = 3, x.test = xtest)
par(mfrow = c(1, 2))
plotSensitivity(m, show.line = c(NA, 0.95))
plotVariance(m, type = "h", show.labels = TRUE)
m = selectCompNum(m, 2)
summary(m)
res = predict(m, xtest, yte)
summary(res)
par(mfrow = c(2, 2))
plotSpecificity(res, show.labels = TRUE)
plotSensitivity(res, show.labels = TRUE)
plotMisclassified(res, show.labels = TRUE)
plotPredictions(res)
xtrain=XBI[1:50,5:116]
ytrain=XBI[1:50,4]
xtrain=snv(xtrain)
xtune=XBI[50:76,5:116]
ytune=XBI[50:76,4]
xtune=snv(xtune)
xtest=XBI[77:159,5:116]
ytest=XBI[77:159,4]
xtest=snv(xtest)
ytr = factor(ytrain, labels = c("Healthy"))
yte = factor(ytest, labels = c("Diseased"))
ytu = factor(ytune, labels = c("Healthy"))
# make a plot with spectra
par(mfrow = c(1, 2))
mdaplot(xtrain, type = "l", cgroup = ytr, main = "Train")
mdaplot(xtest, type = "l", cgroup = yte, main = "Test")
S= simca(xtrain, "Healthy", ncomp = 3)
summary(S)
plot(S)
layout(matrix(c(1, 3, 2, 3), ncol = 2))
plotSensitivity(S, show.labels = TRUE)
plotMisclassified(S, show.labels = TRUE)
plotPredictions(S, show.labels = TRUE)
library(pcv)
Xpv = pcvpca(as.matrix(xtrain), 4, center = TRUE, scale = TRUE, cv = list("ven", 4))
m = simca(xtrain, "versicolor", ncomp = 3, x.test = xtune)
par(mfrow = c(1, 2))
plotSensitivity(m, show.line = c(NA, 0.95))
plotVariance(m, type = "h", show.labels = TRUE)
m = selectCompNum(m, 2)
summary(m)
res = predict(m, xtest, yte)
summary(res)
par(mfrow = c(2, 2))
plotSpecificity(res, show.labels = TRUE)
plotSensitivity(res, show.labels = TRUE)
plotMisclassified(res, show.labels = TRUE)
plotPredictions(res)
show(getConfusionMatrix(res))
show(round(res$p.pred[45:55, 1:3, 1], 4))
par(mfrow = c(2, 1))
plotProbabilities(res, cgroup = yte)
Xpv = pcvpca(as.matrix(xtrain), 4, center = TRUE, scale = TRUE, cv = list("ven", 4))
m = simca(xtrain, "versicolor", ncomp = 3, x.test = xtune)
par(mfrow = c(1, 2))
plotSensitivity(m, show.line = c(NA, 0.95))
plotVariance(m, type = "h", show.labels = TRUE)
m = selectCompNum(m, 2)
summary(m)
res = predict(m, xtest, yte)
summary(res)
par(mfrow = c(2, 2))
plotSpecificity(res, show.labels = TRUE)
plotSensitivity(res, show.labels = TRUE)
plotMisclassified(res, show.labels = TRUE)
plotPredictions(res)
XP=read.csv(file2, row.names=1, check.names = FALSE)
file2="ProvineSIMCA.csv"
file3="CappriciaSIMCA.csv"
XP=read.csv(file2, row.names=1, check.names = FALSE)
XC=read.csv(file3, row.names=1, check.names = FALSE)
XC=read.csv(file3, row.names=1, check.names = FALSE)
View(XC)
View(XC)
xtrain=XC[1:49,3:114]
ytrain=XC[1:49,2]
xtrain=snv(xtrain)
xtune=XC[50:77,3:114]
ytune=XC[50:77,2]
xtune=snv(xtune)
xtest=XC[78:166,3:114]
ytest=XC[78:166,2]
xtest=snv(xtest)
ytr = factor(ytrain, labels = c("Healthy"))
yte = factor(ytest, labels = c("Diseased"))
ytu = factor(ytune, labels = c("Healthy"))
# make a plot with spectra
par(mfrow = c(1, 2))
mdaplot(xtrain, type = "l", cgroup = ytr, main = "Train")
mdaplot(xtest, type = "l", cgroup = yte, main = "Test")
S= simca(xtrain, "Healthy", ncomp = 3)
summary(S)
plot(S)
layout(matrix(c(1, 3, 2, 3), ncol = 2))
plotSensitivity(S, show.labels = TRUE)
plotMisclassified(S, show.labels = TRUE)
plotPredictions(S, show.labels = TRUE)
library(pcv)
Xpv = pcvpca(as.matrix(xtrain), 4, center = TRUE, scale = TRUE, cv = list("ven", 4))
m = simca(xtrain, "versicolor", ncomp = 3, x.test = xtune)
par(mfrow = c(1, 2))
plotSensitivity(m, show.line = c(NA, 0.95))
plotVariance(m, type = "h", show.labels = TRUE)
m = selectCompNum(m, 2)
summary(m)
res = predict(m, xtest, yte)
summary(res)
par(mfrow = c(2, 2))
plotSpecificity(res, show.labels = TRUE)
plotSensitivity(res, show.labels = TRUE)
plotMisclassified(res, show.labels = TRUE)
plotPredictions(res)
show(getConfusionMatrix(res))
Xpv = pcvpca(as.matrix(xtrain), 4, center = TRUE, scale = TRUE, cv = list("ven", 4))
m = simca(xtrain, "Healthy", ncomp = 3, x.test = xtune)
par(mfrow = c(1, 2))
plotSensitivity(m, show.line = c(NA, 0.95))
plotVariance(m, type = "h", show.labels = TRUE)
m = selectCompNum(m, 2)
summary(m)
res = predict(m, xtest, yte)
summary(res)
m = simca(xtrain, "Healthy", ncomp = 3, x.test = xtrain)
par(mfrow = c(1, 2))
plotSensitivity(m, show.line = c(NA, 0.95))
plotVariance(m, type = "h", show.labels = TRUE)
m = selectCompNum(m, 2)
summary(m)
res = predict(m, xtest, yte)
summary(res)
par(mfrow = c(2, 2))
plotSpecificity(res, show.labels = TRUE)
plotSensitivity(res, show.labels = TRUE)
plotMisclassified(res, show.labels = TRUE)
plotPredictions(res)
xtrain=XC[1:49,3:114]
ytrain=XC[1:49,2]
xtrain=snv(savgol(xtrain,2,17,2)
xtrain=XC[1:49,3:114]
ytrain=XC[1:49,2]
xtrain=snv(savgol(xtrain,2,17,2))
xtune=XC[50:77,3:114]
ytune=XC[50:77,2]
xtune=snv(xtune)
xtest=XC[78:166,3:114]
ytest=XC[78:166,2]
xtest=snv(xtest)
xtrain=XP[1:50,5:116]
xtrain=XC[1:49,3:114]
ytrain=XC[1:49,2]
xtrain=snv(savgol(xtrain,2,17,2))
xtune=XC[50:77,3:114]
ytune=XC[50:77,2]
xtune=snv(xtune)
xtest=XC[78:166,3:114]
ytest=XC[78:166,2]
xtest=snv(xtest)
ytr = factor(ytrain, labels = c("Healthy"))
yte = factor(ytest, labels = c("Diseased"))
ytu = factor(ytune, labels = c("Healthy"))
# make a plot with spectra
par(mfrow = c(1, 2))
mdaplot(xtrain, type = "l", cgroup = ytr, main = "Train")
mdaplot(xtest, type = "l", cgroup = yte, main = "Test")
